{"version":3,"sources":["themes/theme.js","themes/colors.js","themes/fontSize.js","themes/fontWeight.js","utils/config.ts","graphql/client.tsx","context/GlobalContext.ts","utils/hooks/useDebounce.ts","styles/InputSlider.ts","utils/hooks/useOutsideClick.ts","components/Menu.tsx","components/Header.tsx","utils/dataUtils.ts","components/GlobalContextComponent.tsx","components/OverlayView.tsx","components/GeoLocate.tsx","graphql/queries/getStopsRadius2.ts","components/Map/MapStops.tsx","components/StopInformation.tsx","components/NextTransports.tsx","graphql/queries/getStopTimetable.ts","components/Map/StopMapCircle.tsx","components/Map/Stops.tsx","components/Map/RouteOnMap.tsx","graphql/subscriptions/getRealtimeVehicleData.ts","components/Map/Vehicle.tsx","components/Map/MapOverlay.tsx","themes/globalStyle.js","App.tsx","serviceWorker.ts","index.tsx","assets/icons/menu.svg","assets/icons/x.svg","assets/icons/bus.svg","assets/icons/tram.svg","assets/icons/train.svg","assets/icons/subway.svg","assets/icons/ferry.svg","assets/icons/vehicle.svg","assets/icons/triangle.svg"],"names":["theme","color","black","blackLighter","gray","grayLight","white","orange","hslBlue","hslGreen","hslOrange","hslPurple","hlsLightBlue","fontSize","base","big","small","xsmall","h1","h2","h3","fontWeight","light","normal","medium","config","apiKey","graphqlAPI","mqttVPAPIDev","mqttVPAPIProd","mapEndpoint","hslMap","initialRadius","maxRadius","initialPositionCoords","lat","lng","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splittedLink","split","query","definition","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","link","GlobalContext","React","createContext","initialLocation","setInitialLocation","geoLocation","setGeoLocation","radiusInMeters","setRadiusInMeters","currentRoute","coordinates","setCurrentRoute","setStopData","stopData","setVehicleData","vehicleData","vehicleType","direction","vehicleCode","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","InputSlider","styled","input","useOutsideClick","ref","callback","handleClick","e","current","contains","target","document","addEventListener","removeEventListener","MenuHeader","p","Button","button","MenuContainer","div","menuOpen","MenuImg","img","MenuSelection","Label","label","Menu","useRef","useContext","radiusInputValue","setRadiusInputValue","setMenuOpen","radiusInMetersDebounce","localStorage","setItem","src","MenuIconClose","MenuIconOpen","onClick","htmlFor","name","type","min","step","max","onChange","HeaderEl","header","Header","className","getTransportationType","transportType","transportName","getIconForVehicleType","Tram","Subway","Train","Bus","Ferry","Vehicle","initialCoords","GlobalContextComponent","children","radius","getItem","isNaN","parseInt","radiusInt","getDefaultRadius","GlobalContextData","Provider","Overlay","OverlayModal","OverlayHeader","OverlayView","window","location","reload","GeoLocate","showOverlay","setShowOverlay","watcher","navigator","geolocation","watchPosition","coords","Number","latitude","toFixed","longitude","enableHighAccuracy","clearWatch","gql","MapStops","useApolloClient","a","getStopsByRadius2","fetchPolicy","notifyOnNetworkStatusChange","variables","lon","stopsResponse","data","stopsByRadius","edges","length","getStops","fadeInOut","keyframes","blink","css","ScheduleIndicator","span","isDelayed","isRealtime","LineNumber","Time","Delay","HeadSign","ShowRoute","StopInformationContainer","LineAndHeadSignContainer","StopInformation","stopInformation","isFirst","encodedCoordinates","trip","tripGeometry","points","realtime","realtimeDeparture","headsign","arrivalDelay","gtfsId","vehicleCoding","lineNumber","route","shortName","time","minutes","Math","floor","seconds","getMinutes","realtimeDepartureTime","timeSinceMidnight","toReadableTime","hours","meridian","getTime24h","vehicleDataObj","splittedId","getVehicleValues","TransportInfoContainer","NextTransports","stoptimesWithoutPatterns","map","index","key","DistanceContainer","borderColor","StopHeader","IconImg","TransportInfoHeader","Blink","NoBlink","RenderPopup","stopId","distance","code","useLazyQuery","getStopTimetable","id","pollInterval","fetchStopData","loading","error","stopPolling","Icon","vehicleTypeColor","Popup","maxWidth","minWidth","onOpen","onClose","autoPan","stop","StopMapCircle","center","platformCode","transportationType","Circle","opacity","fillColor","fillOpacity","Stops","usedGtfsId","node","indexOf","push","closest","RouteOnMap","decodePolyline","Polyline","positions","weight","Image","moving","Image2","degrees","SvgIcon","subscriptions","prevVehicleCode","topic","useSubscription","getRealtimeVehicleData","shouldResubscribe","subscribe2vehicleData","long","start","hdg","spd","Object","keys","icon","divIcon","html","ReactDOMServer","renderToString","alt","Triangle","iconSize","shadowSize","iconAnchor","vehicleCoords","Marker","position","MapContainer","MapMarker","useMap","locate","on","setView","latlng","MapOverlay","zoom","TileLayer","url","tileSize","attribution","GlobalStyle","createGlobalStyle","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.0779bbd3.chunk.js","sourcesContent":["import color from \"./colors\";\nimport fontSize from \"./fontSize\";\nimport fontWeight from \"./fontWeight\";\n\nconst theme = {\n  color,\n  fontSize,\n  fontWeight,\n};\n\nexport default theme;\n","const color = {\n  black: \"#000000\",\n  blackLighter: \"#101010\",\n  gray: \"#383635\",\n  grayLight: \"#939393\",\n  white: \"#ffffff\",\n  orange: \"#f56c42\",\n  hslBlue: \"#007ac9\",\n  hslGreen: \"#00985f\",\n  hslOrange: \"#ff6319\",\n  hslPurple: \"#8c4799\",\n  hlsLightBlue: \"#00b9e4\",\n};\n\nexport default color;\n","const fontSize = {\n  base: \"1rem\",\n  big: \"1.25rem\",\n  small: \"0.825rem\",\n  xsmall: \"0.625rem\",\n  h1: \"2.5rem\",\n  h2: \"2rem\",\n  h3: \"1.5rem\",\n};\n\nexport default fontSize;\n","const fontWeight = {\n  light: 300,\n  normal: 400,\n  medium: 500,\n};\n\nexport default fontWeight;\n","const config = {\n  apiKey: \"5e581f69ad9c4225a83ac21d4bf37809\",\n  graphqlAPI: \"https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql\",\n  mqttVPAPIDev: \"ws://localhost:4000/graphql\",\n  mqttVPAPIProd: \"wss://buckets/graphql\",\n  mapEndpoint:\n    \"https://tile.thunderforest.com/transport/{z}/{x}/{y}.png?apikey=\",\n  hslMap: \"https://cdn.digitransit.fi/map/v1/hsl-map/{z}/{x}/{y}@2x.png\",\n  initialRadius: 150,\n  maxRadius: 1200,\n  initialPositionCoords: { lat: 60.1699, lng: 24.9384 },\n};\n\nexport default config;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\nimport config from \"../utils/config\";\n\nimport { split, HttpLink } from \"@apollo/client\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\n\nconst httpLink = new HttpLink({\n  uri: config.graphqlAPI,\n});\n\nconst wsLink = new WebSocketLink({\n  uri:\n    process.env.REACT_APP_STAGE === \"production\"\n      ? config.mqttVPAPIProd\n      : config.mqttVPAPIDev,\n  options: {\n    reconnect: true,\n  },\n});\n\n// The split function takes three parameters:\n//\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\nconst splittedLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splittedLink,\n});\n\nexport default client;\n","import React from \"react\";\n\nexport interface LocationProps {\n  lat: number;\n  lng: number;\n}\n\nexport interface RouteProps {\n  color: string | null;\n  coordinates: string | null;\n  gtfsId?: string;\n}\n\nexport interface VehicleProps {\n  vehicleType: number;\n  direction: string;\n  vehicleCode: string;\n}\n\ninterface AppContextProps {\n  initialLocation: LocationProps;\n  setInitialLocation: React.Dispatch<React.SetStateAction<LocationProps>>;\n  geoLocation: LocationProps;\n  setGeoLocation: React.Dispatch<React.SetStateAction<LocationProps>>;\n  radiusInMeters: number;\n  setRadiusInMeters: React.Dispatch<React.SetStateAction<number>>;\n  currentRoute: RouteProps;\n  setCurrentRoute: React.Dispatch<React.SetStateAction<RouteProps>>;\n  stopData: any;\n  setStopData: React.Dispatch<React.SetStateAction<any>>;\n  setVehicleData: React.Dispatch<React.SetStateAction<VehicleProps>>;\n  vehicleData: VehicleProps;\n}\n\nconst GlobalContext = React.createContext<AppContextProps>({\n  /* tslint:disable:no-empty */\n  initialLocation: { lat: 0, lng: 0 },\n  setInitialLocation: (): void => {},\n  geoLocation: { lat: 0, lng: 0 },\n  setGeoLocation: (): void => {},\n  radiusInMeters: 0,\n  setRadiusInMeters: (): void => {},\n  currentRoute: { color: null, coordinates: null },\n  setCurrentRoute: (): void => {},\n  setStopData: (): void => {},\n  stopData: null,\n  setVehicleData: (): void => {},\n  vehicleData: { vehicleType: -1, direction: \"\", vehicleCode: \"\" },\n});\n\nexport default GlobalContext;\n","import React from \"react\";\n\n/**\n * Hook to handle the click outside the referenced element\n * @param value - actul value that is returned back\n * @param delay - delay when value is returned in ms\n */\nconst useDebounce = (value: number | string, delay: number) => {\n  // States for debounce\n  const [debouncedValue, setDebouncedValue] = React.useState(value);\n\n  React.useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default useDebounce;\n","import styled from \"styled-components\";\n\nconst InputSlider = styled.input`\n  width: 100%;\n  margin: 6.45px 0;\n  background-color: transparent;\n  -webkit-appearance: none;\n\n  &:focus {\n    outline: none;\n  }\n  &::-webkit-slider-runnable-track {\n    background-color: #eae7e9;\n    border: 1px solid rgba(177, 176, 178, 0.7);\n    border-radius: 5.1px;\n    width: 100%;\n    height: 7.1px;\n    cursor: pointer;\n  }\n  &::-webkit-slider-thumb {\n    margin-top: -7.45px;\n    width: 20px;\n    height: 20px;\n    background-color: #f56c42;\n    border: 1px solid #10091e;\n    border-radius: 20px;\n    cursor: pointer;\n    -webkit-appearance: none;\n  }\n  &:focus::-webkit-slider-runnable-track {\n    background-color: #f56c42;\n  }\n  &::-moz-range-track {\n    background-color: #eae7e9;\n    border: 1px solid rgba(177, 176, 178, 0.7);\n    border-radius: 5.1px;\n    width: 100%;\n    height: 7.1px;\n    cursor: pointer;\n  }\n  &::-moz-range-thumb {\n    width: 20px;\n    height: 20px;\n    background-color: #f56c42;\n    border: 1px solid #10091e;\n    border-radius: 20px;\n    cursor: pointer;\n  }\n  &::-ms-track {\n    background-color: transparent;\n    border-color: transparent;\n    border-width: 7.65px 0;\n    color: transparent;\n    width: 100%;\n    height: 7.1px;\n    cursor: pointer;\n  }\n  &::-ms-fill-lower {\n    background-color: #cbc4c9;\n    border: 1px solid rgba(177, 176, 178, 0.7);\n    border-radius: 10.2px;\n  }\n  &::-ms-fill-upper {\n    background-color: #eae7e9;\n    border: 1px solid rgba(177, 176, 178, 0.7);\n    border-radius: 10.2px;\n  }\n  &::-ms-thumb {\n    width: 20px;\n    height: 20px;\n    background-color: #f56c42;\n    border: 1px solid #10091e;\n    border-radius: 20px;\n    cursor: pointer;\n    margin-top: 0px;\n    /*Needed to keep the Edge thumb centred*/\n  }\n  &:focus::-ms-fill-lower {\n    background-color: #eae7e9;\n  }\n  &:focus::-ms-fill-upper {\n    background-color: #ffffff;\n  }\n`;\n\nexport default InputSlider;\n","import { useEffect } from \"react\";\n\n/**\n * Hook to handle the click outside the referenced element\n * @param ref - reference to the targeted element\n * @param callback - callback\n */\n\nconst useOutsideClick = (ref: any, callback: any) => {\n  const handleClick = (e: MouseEvent | KeyboardEvent) => {\n    if (ref?.current && !ref?.current.contains(e.target)) {\n      callback();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  });\n};\n\nexport default useOutsideClick;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport MenuIconOpen from \"../assets/icons/menu.svg\";\nimport MenuIconClose from \"../assets/icons/x.svg\";\nimport GlobalContext from \"../context/GlobalContext\";\nimport useDebounce from \"../utils/hooks/useDebounce\";\nimport InputSlider from \"../styles/InputSlider\";\nimport useOutsideClick from \"../utils/hooks/useOutsideClick\";\nimport config from \"../utils/config\";\n\nconst MenuHeader = styled.h3`\n  font-size: ${(p) => p.theme.fontSize.base};\n  margin: 0;\n  padding: 0;\n  margin-bottom: 1rem;\n`;\n\nconst Button = styled.button`\n  margin: 1rem 0;\n  padding: 0.35rem 1rem;\n  border-radius: 5px;\n  color: ${(p) => p.theme.color.white};\n  font-size: ${(p) => p.theme.fontSize.small};\n  border: none;\n  background: ${(p) => p.theme.color.hslBlue};\n`;\n\nconst MenuContainer = styled.div<{ menuOpen: boolean }>`\n  position: fixed;\n  display: flex;\n  border-radius: 1rem;\n  justify-items: center;\n\n  top: 0.25rem;\n  right: 0.25rem;\n  width: 3rem;\n  height: 3rem;\n  padding: 1rem;\n  transition: all 0.3s ease-in-out;\n  max-height: 320px;\n  max-width: 15rem;\n  width: ${(p) => (p.menuOpen ? \"100vw\" : \"2rem\")};\n  height: ${(p) => (p.menuOpen ? \"100vh\" : \"2rem\")};\n  background: ${(p) => (p.menuOpen ? \"#fff\" : \"transparent\")};\n  box-shadow: ${(p) =>\n    p.menuOpen ? \"0 0.25rem 1rem rgba(1, 1, 1, 0.5)\" : \"none\"};\n`;\n\nconst MenuImg = styled.img`\n  position: absolute;\n  right: 1rem;\n  width: 2rem;\n  height: 2rem;\n  text-align: right;\n`;\n\nconst MenuSelection = styled.div<{ menuOpen: boolean }>`\n  flex: 1 1 auto;\n  transition: opacity 4s ease-in;\n  display: ${(p) => (p.menuOpen ? \"block\" : \"none\")};\n  opacity: ${(p) => (p.menuOpen ? 1 : 0)};\n  margin-right: 5rem;\n`;\n\nconst Label = styled.label`\n  font-size: ${(p) => p.theme.fontSize.small};\n  font-weight: ${(p) => p.theme.fontWeight.medium};\n  margin-bottom: 0.25rem;\n  display: block;\n`;\n\nconst Menu = () => {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const {\n    radiusInMeters,\n    setRadiusInMeters,\n    setCurrentRoute,\n  } = React.useContext(GlobalContext);\n  const [radiusInputValue, setRadiusInputValue] = React.useState(\n    radiusInMeters\n  );\n  const [menuOpen, setMenuOpen] = React.useState(false);\n  const radiusInMetersDebounce: any = useDebounce(radiusInputValue, 300);\n\n  const handleOnChange = (e: any) => {\n    setRadiusInputValue(e.target.value);\n  };\n\n  const toggleMenu = () => {\n    setMenuOpen(!menuOpen);\n  };\n\n  const clearRoute = () => {\n    setCurrentRoute({ color: null, coordinates: null });\n  };\n\n  useOutsideClick(ref, () => {\n    if (menuOpen) {\n      setMenuOpen(false);\n    }\n  });\n  // Debounce radiusInmeters change so that context change doesn't every single onChange\n  React.useEffect(() => {\n    setRadiusInMeters(radiusInMetersDebounce);\n    localStorage?.setItem(\"HSLTestRadius\", radiusInMetersDebounce);\n  }, [radiusInMetersDebounce, setRadiusInMeters]);\n\n  return (\n    <MenuContainer menuOpen={menuOpen} ref={ref}>\n      <MenuImg\n        src={menuOpen ? MenuIconClose : MenuIconOpen}\n        onClick={toggleMenu}\n      />\n      <MenuSelection menuOpen={menuOpen}>\n        <MenuHeader>Settings</MenuHeader>\n        <Label htmlFor=\"radius\">Max walking ({radiusInputValue} m)</Label>\n        <InputSlider\n          name=\"radius\"\n          type=\"range\"\n          min=\"20\"\n          step=\"20\"\n          max={config.maxRadius}\n          value={radiusInputValue}\n          onChange={handleOnChange}\n        />\n        <Button onClick={clearRoute}>Clear Route</Button>\n      </MenuSelection>\n    </MenuContainer>\n  );\n};\n\nexport default Menu;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Menu from \"./Menu\";\n\nconst HeaderEl = styled.header`\n  position: absolute;\n  z-index: 100000;\n`;\n\nconst Header = () => {\n  return (\n    <HeaderEl className=\"HSL-test-header\">\n      <Menu />\n    </HeaderEl>\n  );\n};\n\nexport default Header;\n","import { toReadableTime } from \"seconds-since-midnight\";\nimport config from \"../utils/config\";\nimport theme from \"../themes/theme\";\nimport Bus from \"../assets/icons/bus.svg\";\nimport Tram from \"../assets/icons/tram.svg\";\nimport Train from \"../assets/icons/train.svg\";\nimport Subway from \"../assets/icons/subway.svg\";\nimport Ferry from \"../assets/icons/ferry.svg\";\nimport Vehicle from \"../assets/icons/vehicle.svg\";\n\n// HSL API reports times seconds after midnight\nexport const getTime24h = (timeSinceMidnight: number) => {\n  const { hours, minutes, meridian } = toReadableTime(timeSinceMidnight);\n  if (meridian === \"PM\") {\n    return `${parseInt(hours) + 12}.${minutes}`;\n  }\n  return `${hours === \"12\" ? \"0\" : hours}.${minutes}`;\n};\n\nexport const getMinutes = (time: number) => {\n  const minutes = Math.floor(time / 60);\n  const seconds = time - minutes * 60;\n  return `${minutes > 0 ? minutes + \"min \" : \"\"}${seconds}s`;\n};\n\n// HSL Codes for different transportation vehicles mapped to name and color\nexport const getTransportationType = (transportType: number) => {\n  switch (transportType) {\n    case 0:\n      return { transportName: \"Tram\", color: theme.color.hslGreen };\n    case 1:\n      return { transportName: \"Metro\", color: theme.color.hslOrange };\n    case 2:\n      return { transportName: \"Train\", color: theme.color.hslPurple };\n    case 3:\n      return { transportName: \"Bus\", color: theme.color.hslBlue };\n    case 4:\n      return { transportName: \"Ferry\", color: theme.color.hlsLightBlue };\n    default:\n      return { transportName: \"Unknown\", color: theme.color.orange };\n  }\n};\n\nexport const getIconForVehicleType = (transportType: number) => {\n  switch (transportType) {\n    case 0:\n      return Tram;\n    case 1:\n      return Subway;\n    case 2:\n      return Train;\n    case 3:\n      return Bus;\n    case 4:\n      return Ferry;\n    default:\n      return Vehicle;\n  }\n};\n\n// parse radius from localStorage value or return one from config\nexport const getDefaultRadius = () => {\n  const radius: string | null = localStorage?.getItem(\"HSLTestRadius\");\n  if (radius && !isNaN(parseInt(radius))) {\n    const radiusInt: number = parseInt(radius);\n    return radiusInt > config.maxRadius ? config.maxRadius : radiusInt;\n  }\n  return config.initialRadius;\n};\n","import React from \"react\";\nimport GlobalContext, {\n  LocationProps,\n  RouteProps,\n  VehicleProps,\n} from \"../context/GlobalContext\";\nimport { getDefaultRadius } from \"../utils/dataUtils\";\n\ninterface GlobalContextProps {\n  children: React.ReactNode;\n}\n\nconst initialCoords = {\n  lat: 0,\n  lng: 0,\n};\n\nconst GlobalContextComponent = ({ children }: GlobalContextProps) => {\n  const [initialLocation, setInitialLocation] = React.useState<LocationProps>(\n    initialCoords\n  );\n  const [geoLocation, setGeoLocation] = React.useState<LocationProps>(\n    initialCoords\n  );\n  const [radiusInMeters, setRadiusInMeters] = React.useState<number>(\n    getDefaultRadius()\n  );\n  const [currentRoute, setCurrentRoute] = React.useState<RouteProps>({\n    coordinates: null,\n    color: \"black\",\n  });\n\n  const [stopData, setStopData] = React.useState<any>(null);\n  const [vehicleData, setVehicleData] = React.useState<VehicleProps>({\n    vehicleType: -1,\n    direction: \"\",\n    vehicleCode: \"\",\n  });\n\n  const GlobalContextData = {\n    initialLocation,\n    setInitialLocation,\n    geoLocation,\n    setGeoLocation,\n    radiusInMeters,\n    setRadiusInMeters,\n    currentRoute,\n    setCurrentRoute,\n    stopData,\n    setStopData,\n    vehicleData,\n    setVehicleData,\n  };\n\n  return (\n    <GlobalContext.Provider value={GlobalContextData}>\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n\nexport default GlobalContextComponent;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Overlay = styled.div`\n  position: absolute;\n  background: rgba(1, 1, 1, 0.5);\n  width: 100vw;\n  height: 100vh;\n  z-index: 10000;\n  display: flex;\n  align-items: center;\n  justify-items: center;\n`;\n\nconst OverlayModal = styled.div`\n  margin: auto;\n  width: 300px;\n  min-height: 100px;\n  padding: 1rem;\n  background: #fff;\n  text-align: center;\n  border-radius: 0.5rem;\n`;\n\nconst OverlayHeader = styled.h1`\n  text-align: center;\n`;\n\nconst Button = styled.button`\n  background: ${(p) => p.theme.color.hslGreen};\n  color: ${(p) => p.theme.color.white};\n  padding: 0.5rem 1.5rem;\n  font-weight: 700;\n  font-size: 1.2rem;\n  border-radius: 0.25rem;\n  border: none;\n`;\n\nconst OverlayView = () => {\n  const handleRefresh = () => {\n    window.location.reload();\n  };\n  return (\n    <Overlay>\n      <OverlayModal>\n        <OverlayHeader>Geolocation is turned off :(</OverlayHeader>\n        <h3>\n          You have to turn Geolocation on in order to use the functionality.\n        </h3>\n        <Button onClick={handleRefresh}>Refresh</Button>\n      </OverlayModal>\n    </Overlay>\n  );\n};\nexport default OverlayView;\n","import React from \"react\";\nimport GlobalContext from \"../context/GlobalContext\";\nimport OverlayView from \"./OverlayView\";\n\nconst GeoLocate = ({ children }: any) => {\n  const { setGeoLocation } = React.useContext(GlobalContext);\n\n  const [showOverlay, setShowOverlay] = React.useState(false);\n\n  React.useEffect(() => {\n    const success = ({ coords }: any) => {\n      setGeoLocation({\n        lat: Number(coords.latitude.toFixed(4)),\n        lng: Number(coords.longitude.toFixed(4)),\n      });\n    };\n    const error = () => {\n      setShowOverlay(true);\n    };\n\n    let watcher: any;\n    if (navigator.geolocation) {\n      setShowOverlay(false);\n      watcher = navigator.geolocation.watchPosition(success, error, {\n        enableHighAccuracy: true,\n      });\n    }\n    return () => {\n      if (navigator.geolocation && watcher) {\n        navigator?.geolocation?.clearWatch(watcher);\n      }\n    };\n  }, [setGeoLocation, setShowOverlay]);\n\n  if (showOverlay) {\n    return <OverlayView />;\n  }\n  return <>{children}</>;\n};\n\nexport default GeoLocate;\n","import gql from \"graphql-tag\";\n\nexport default gql`\n  query getStopsByRadius(\n    $lat: Float!\n    $lon: Float!\n    $radius: Int!\n    $first: Int\n  ) {\n    stopsByRadius(lat: $lat, lon: $lon, radius: $radius, first: $first) {\n      edges {\n        node {\n          stop {\n            gtfsId\n            name\n            code\n            locationType\n            vehicleType\n            lat\n            lng: lon\n            platformCode\n          }\n          distance\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { useApolloClient } from \"@apollo/client\";\nimport getStopsByRadius2 from \"../../graphql/queries/getStopsRadius2\";\nimport GlobalContext from \"../../context/GlobalContext\";\n\ninterface QueryArgs {\n  lat: number;\n  lon: number;\n  radius: number;\n  first?: number;\n}\n\nconst MapStops = () => {\n  const { geoLocation, radiusInMeters, setStopData } = React.useContext(\n    GlobalContext\n  );\n  const client: any = useApolloClient();\n\n  React.useEffect(() => {\n    const getStops = async () => {\n      const { data: stopsResponse } = await client.query({\n        query: getStopsByRadius2,\n        fetchPolicy: \"no-cache\",\n        notifyOnNetworkStatusChange: true,\n        variables: {\n          lat: geoLocation.lat,\n          lon: geoLocation.lng,\n          radius: radiusInMeters,\n        },\n      });\n      if (stopsResponse?.stopsByRadius?.edges?.length > 0) {\n        setStopData(stopsResponse);\n      }\n    };\n    getStops();\n  }, [client, geoLocation.lat, geoLocation.lng, radiusInMeters, setStopData]);\n\n  return <></>;\n};\n\nexport default MapStops;\n","import React from \"react\";\nimport styled, { keyframes, css } from \"styled-components\";\nimport {\n  getTime24h,\n  getTransportationType,\n  getMinutes,\n} from \"../utils/dataUtils\";\nimport GlobalContext from \"../context/GlobalContext\";\nimport { StopTimesProps } from \"../types/hslDataTypes\";\n\nconst fadeInOut = keyframes`\n  0% {\n    opacity: 0;\n  }\n\n  50% {\n   opacity: 1;\n  }\n  100% {\n    opacity: 0;\n  }\n`;\n\nexport const blink = css`\n  animation: ${fadeInOut} 2s linear infinite;\n`;\n\nconst ScheduleIndicator = styled.span<{\n  isDelayed: boolean;\n  isRealtime: boolean;\n}>`\n  font-size: ${(p) => p.theme.fontSize.h2};\n  color: ${(p) => (p.isDelayed ? \"red\" : \"green\")};\n  margin-right: 0.25rem;\n  margin-top: 2px;\n  ${(p) => p.isRealtime && blink};\n`;\n\nconst LineNumber = styled.span`\n  font-weight: ${(p) => p.theme.fontWeight.medium};\n`;\n\nconst Time = styled.span`\n  font-weight: ${(p) => p.theme.fontWeight.medium};\n  font-size: ${(p) => p.theme.fontSize.big};\n  margin-left: 0.25rem;\n  width: 3rem;\n`;\n\nconst Delay = styled.span`\n  display: block;\n  font-size: ${(p) => p.theme.fontSize.xsmall};\n  color: ${(p) => p.theme.color.grayLight};\n`;\n\nconst HeadSign = styled.span`\n  font-weight: ${(p) => p.theme.fontWeight.normal};\n  color: ${(p) => p.theme.color.gray};\n  font-size: ${(p) => p.theme.fontSize.small};\n  white-space: nowrap;\n  max-width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst ShowRoute = styled.div`\n  color: ${(p) => p.theme.color.grayLight};\n  font-size: ${(p) => p.theme.fontSize.small};\n  position: absolute;\n  top: 0.125rem;\n  right: 0.25rem;\n`;\n\nconst StopInformationContainer = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  font-weight: ${(p) => p.theme.fontWeight.normal};\n  font-size: ${(p) => p.theme.fontSize.base};\n  ${ShowRoute} {\n    opacity: 0;\n  }\n  &:hover {\n    cursor: pointer;\n    ${ShowRoute} {\n      transition: all 0.2s linear;\n      opacity: 1;\n    }\n  }\n`;\n\nconst LineAndHeadSignContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1 1 0;\n  flex-direction: column;\n  justify-content: center;\n  line-height: 1.1;\n  margin-left: 1rem;\n`;\n\nconst getVehicleValues = (vehicleData: string, vehicleType: number) => {\n  const splittedId = vehicleData.split(\"_\");\n  const vehicleCode = splittedId[0].split(\":\")[1];\n  const direction = splittedId[3];\n  return { vehicleType, direction, vehicleCode };\n};\n\nconst StopInformation = ({\n  stopInformation,\n  vehicleType,\n  isFirst,\n}: {\n  stopInformation: StopTimesProps;\n  vehicleType: number;\n  isFirst: boolean;\n}) => {\n  const encodedCoordinates: string = stopInformation.trip.tripGeometry.points;\n  const { setCurrentRoute, setVehicleData } = React.useContext(GlobalContext);\n  const { color } = getTransportationType(vehicleType);\n  const {\n    realtime,\n    realtimeDeparture,\n    headsign,\n    arrivalDelay,\n  } = stopInformation;\n  const { gtfsId: vehicleCoding = \"\" } = stopInformation.trip;\n  const { shortName: lineNumber } = stopInformation.trip.route;\n  const isDelayed: boolean = arrivalDelay > 0;\n  const delay = isDelayed && getMinutes(arrivalDelay);\n  const realtimeDepartureTime = getTime24h(realtimeDeparture);\n  React.useEffect(() => {\n    if (isFirst) {\n      const vehicleDataObj = getVehicleValues(vehicleCoding, vehicleType);\n      setVehicleData(vehicleDataObj);\n    }\n  }, [isFirst, setVehicleData, vehicleCoding, vehicleType]);\n\n  const handleSetRoute = () => {\n    setCurrentRoute({ color, coordinates: encodedCoordinates });\n  };\n\n  return (\n    <StopInformationContainer onClick={handleSetRoute}>\n      <ShowRoute>show route</ShowRoute>\n      <ScheduleIndicator isDelayed={isDelayed} isRealtime={realtime}>\n        •\n      </ScheduleIndicator>\n      <Time>\n        {realtimeDepartureTime} {delay && <Delay>~{delay} late</Delay>}\n      </Time>\n      <LineAndHeadSignContainer>\n        <LineNumber>{lineNumber}</LineNumber>\n        <HeadSign>{headsign}</HeadSign>\n      </LineAndHeadSignContainer>\n    </StopInformationContainer>\n  );\n};\n\nexport default StopInformation;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport StopInformation from \"./StopInformation\";\nimport { StopProps, StopTimesProps } from \"../types/hslDataTypes\";\n\nconst TransportInfoContainer = styled.div`\n  padding: 0.5rem 0 1.5rem;\n`;\n\nconst NextTransports = ({ stopData }: { stopData: StopProps }) => {\n  return (\n    <TransportInfoContainer>\n      {stopData?.stoptimesWithoutPatterns?.map(\n        (stopInformation: StopTimesProps, index: number) => (\n          <StopInformation\n            key={`stopInfo-${index}`}\n            isFirst={index === 0}\n            stopInformation={stopInformation}\n            vehicleType={stopData.vehicleType}\n          />\n        )\n      )}\n    </TransportInfoContainer>\n  );\n};\nexport default NextTransports;\n","import gql from \"graphql-tag\";\n\nexport default gql`\n  query getStopTimetable($id: String!) {\n    stop(id: $id) {\n      name\n      code\n      locationType\n      vehicleType\n      platformCode\n      stoptimesWithoutPatterns(omitNonPickups: true, omitCanceled: false) {\n        scheduledArrival\n        realtimeArrival\n        arrivalDelay\n        scheduledDeparture\n        realtimeDeparture\n        departureDelay\n        realtime\n        realtimeState\n        headsign\n        trip {\n          gtfsId\n          id\n          directionId\n          tripGeometry {\n            length\n            points\n          }\n          route {\n            gtfsId\n            shortName\n            stops {\n              name\n              gtfsId\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Circle, CircleProps, Popup } from \"react-leaflet\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport theme from \"../../themes/theme\";\nimport styled from \"styled-components\";\nimport NextTransports from \"../NextTransports\";\nimport {\n  getTransportationType,\n  getIconForVehicleType,\n} from \"../../utils/dataUtils\";\nimport { StopProps } from \"../../types/hslDataTypes\";\nimport getStopTimetable from \"../../graphql/queries/getStopTimetable\";\nimport { blink } from \"../StopInformation\";\n\ninterface MyCircleProps extends CircleProps {\n  stopData: StopProps;\n  closest: boolean;\n  distance: number;\n  stopId: string;\n}\n\nconst DistanceContainer = styled.div<{ borderColor: string }>`\n  padding-bottom: 0.5rem;\n  border-bottom: 2px solid ${(p) => p.borderColor};\n  text-align: center;\n  font-size: ${(p) => p.theme.fontSize.small};\n  color: ${(p) => p.theme.color.blackLighter};\n  font-weight: ${(p) => p.theme.fontWeight.light};\n`;\n\nconst StopInformation = styled.div`\n  margin-top: 0.5rem;\n  font-weight: ${(p) => p.theme.fontWeight.medium};\n`;\n\nconst StopHeader = styled.h2`\n  text-align: center;\n  margin-bottom: 0;\n`;\n\nconst IconImg = styled.img`\n  display: block;\n  width: 2rem;\n  height: 2rem;\n  margin: 0.25rem auto;\n`;\n\nconst TransportInfoHeader = styled.div`\n  margin-top: 0.25rem;\n  font-size: ${(p) => p.theme.fontSize.small};\n  color: ${(p) => p.theme.color.grayLight};\n  text-align: center;\n`;\n\nconst Blink = styled.span`\n  ${blink};\n`;\n\nconst NoBlink = styled(Blink)`\n  animation: none;\n`;\n\nconst RenderPopup = ({\n  stopId,\n  distance,\n  name,\n  vehicleType,\n  code,\n}: {\n  stopId: string;\n  distance: number;\n  name: string;\n  code: string;\n  vehicleType: number;\n}) => {\n  const [fetchStopData, { loading, error, data, stopPolling }] = useLazyQuery<\n    any,\n    any\n  >(getStopTimetable, {\n    fetchPolicy: \"no-cache\",\n    variables: {\n      id: stopId,\n    },\n    pollInterval: 20000,\n  });\n\n  React.useEffect(() => {\n    return () => {\n      if (stopPolling) {\n        stopPolling();\n      }\n    };\n  }, [stopPolling]);\n\n  const stopFetching = () => {\n    if (stopPolling) {\n      stopPolling();\n    }\n  };\n\n  const Icon = getIconForVehicleType(vehicleType);\n  const { color: vehicleTypeColor } = getTransportationType(vehicleType);\n\n  return (\n    <Popup\n      maxWidth={320}\n      minWidth={250}\n      onOpen={fetchStopData}\n      onClose={stopFetching}\n      autoPan={false}\n    >\n      {loading && <div>Loading...</div>}\n      {error && <div>Error fetching info</div>}\n      <StopInformation>\n        <StopHeader>\n          <IconImg src={Icon} />\n          {name}\n        </StopHeader>\n        <DistanceContainer borderColor={vehicleTypeColor}>\n          {distance} m ({code})\n        </DistanceContainer>\n        <div>{data && <NextTransports stopData={data.stop} />}</div>\n        <TransportInfoHeader>\n          <div>\n            <Blink>•</Blink> Realtime Departure\n          </div>\n          <NoBlink>•</NoBlink> Scheduled departure\n        </TransportInfoHeader>\n      </StopInformation>\n    </Popup>\n  );\n};\n\nconst StopMapCircle = ({\n  center,\n  radius,\n  stopData,\n  distance,\n  stopId,\n}: MyCircleProps) => {\n  const { name, code, platformCode, vehicleType } = stopData;\n  const transportationType = getTransportationType(vehicleType);\n  return (\n    <Circle\n      center={center}\n      radius={radius}\n      color={theme.color.blackLighter}\n      opacity={1}\n      fillColor={transportationType.color}\n      fillOpacity={0.7}\n    >\n      <RenderPopup\n        stopId={stopId}\n        distance={distance}\n        name={name}\n        code={platformCode || code}\n        vehicleType={vehicleType}\n      />\n    </Circle>\n  );\n};\n\nexport default StopMapCircle;\n","import React from \"react\";\nimport GlobalContext from \"../../context/GlobalContext\";\nimport StopMapCircle from \"./StopMapCircle\";\nimport { EdgesProps } from \"../../types/hslDataTypes\";\nconst Stops = () => {\n  const { stopData } = React.useContext(GlobalContext);\n  let usedGtfsId: any = [];\n  if (stopData) {\n    return stopData?.stopsByRadius?.edges?.map(\n      ({ node }: EdgesProps, index: number) => {\n        const stopData = node.stop;\n        const { gtfsId, lat, lng } = stopData;\n        const distance = node.distance;\n        if (usedGtfsId.indexOf(gtfsId) !== -1) {\n          return undefined;\n        }\n        usedGtfsId.push(gtfsId);\n        return (\n          <StopMapCircle\n            key={gtfsId}\n            stopId={stopData.gtfsId}\n            center={[lat, lng]}\n            radius={6}\n            stopData={stopData}\n            closest={index === 0}\n            distance={distance}\n          />\n        );\n      }\n    );\n  }\n  return <></>;\n};\n\nexport default Stops;\n","import React from \"react\";\nimport { Polyline } from \"react-leaflet\";\nimport GlobalContext from \"../../context/GlobalContext\";\nimport decodePolyline from \"decode-google-map-polyline\";\nimport theme from \"../../themes/theme\";\nconst RouteOnMap = () => {\n  const { currentRoute } = React.useContext(GlobalContext);\n\n  if (!currentRoute.coordinates) {\n    return <></>;\n  }\n\n  const coordinates: any = decodePolyline(currentRoute.coordinates);\n\n  return (\n    <Polyline\n      positions={coordinates}\n      weight={8}\n      color={currentRoute.color || theme.color.black}\n    />\n  );\n};\n\nexport default RouteOnMap;\n","import gql from \"graphql-tag\";\n\nexport default gql`\n  subscription getRealtimeVehicleData($topic: String!) {\n    subscribe2vehicleData(topic: $topic) {\n      spd\n      hdg\n      lat\n      long\n      start\n    }\n  }\n`;\n","import React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { Marker } from \"react-leaflet\";\nimport { divIcon } from \"leaflet\";\nimport GlobalContext from \"../../context/GlobalContext\";\nimport { useSubscription } from \"@apollo/client\";\nimport getRealtimeVehicleData from \"../../graphql/subscriptions/getRealtimeVehicleData\";\nimport { getIconForVehicleType } from \"../../utils/dataUtils\";\nimport Triangle from \"../../assets/icons/triangle.svg\";\nimport styled from \"styled-components\";\n\nconst Image = styled.img<{ moving: boolean }>`\n  opacity: ${(p) => !p.moving && 0.6};\n  width: 30px;\n  height: auto;\n  border: none;\n  background: none;\n`;\n\nconst Image2 = styled.img<{ degrees: number; moving: boolean }>`\n  opacity: ${(p) => !p.moving && 0.6};\n  transform: rotate(${(p) => p.degrees}deg);\n  position: absolute;\n  margin-left: 10px;\n  margin-top: -27px;\n  width: 9px;\n  height: 9px;\n`;\n\nconst Vehicle = () => {\n  const { vehicleData } = React.useContext(GlobalContext);\n  const { vehicleCode, direction, vehicleType } = vehicleData;\n  const SvgIcon = getIconForVehicleType(vehicleType);\n  const subscriptions: any = React.useRef({});\n  const prevVehicleCode = React.useRef<string | null>(null);\n  const topic = `/hfp/v2/journey/+/vp/+/+/+/${vehicleCode}/${direction}/#`;\n  const { data } = useSubscription(getRealtimeVehicleData, {\n    variables: { topic },\n    shouldResubscribe: vehicleCode + direction !== prevVehicleCode?.current,\n  });\n\n  if (!data) {\n    subscriptions.current = {};\n  }\n\n  React.useEffect(() => {\n    prevVehicleCode.current = vehicleCode + direction;\n  }, [vehicleCode, vehicleData, direction]);\n\n  React.useEffect(() => {\n    if (data) {\n      const { lat, long, start, hdg, spd } = data?.subscribe2vehicleData;\n      subscriptions.current = {\n        ...subscriptions.current,\n        [start]: {\n          lat,\n          long,\n          hdg,\n          spd,\n        },\n      };\n    } else {\n      subscriptions.current = {};\n    }\n  }, [data]);\n\n  return (\n    <>\n      {Object.keys(subscriptions.current).map((key: string) => {\n        const { lat, long, hdg, spd } = subscriptions.current[key];\n        const icon = divIcon({\n          html: ReactDOMServer.renderToString(\n            <>\n              <Image src={SvgIcon} alt=\"vehicle\" moving={spd > 1} />\n              <Image2\n                src={Triangle}\n                alt=\"vehicle\"\n                degrees={hdg}\n                moving={spd > 1}\n              />\n            </>\n          ),\n          className: \"vehicle\",\n          iconSize: [0, 0],\n          shadowSize: [0, 0],\n          iconAnchor: [7, 10],\n        });\n        const vehicleCoords = { lat, lng: long };\n        return <Marker key={key} position={vehicleCoords} icon={icon} />;\n      })}\n    </>\n  );\n};\n\nexport default Vehicle;\n","import React from \"react\";\nimport {\n  MapContainer as LeafletMap,\n  TileLayer,\n  Marker,\n  useMap,\n} from \"react-leaflet\";\nimport GlobalContext from \"../../context/GlobalContext\";\nimport styled from \"styled-components\";\nimport MapStops from \"./MapStops\";\nimport Stops from \"./Stops\";\nimport RouteOnMap from \"./RouteOnMap\";\nimport config from \"../../utils/config\";\nimport Vehicle from \"./Vehicle\";\n\nconst MapContainer = styled.div`\n  width: 100%;\n  height: 100vh;\n`;\n\nconst MapMarker = () => {\n  const { geoLocation } = React.useContext(GlobalContext);\n  const map = useMap();\n  React.useEffect(() => {\n    map.locate();\n    map.on(\"locationfound\", (e) => {\n      map.setView(e.latlng, 17);\n    });\n  }, [map]);\n  return <Marker position={geoLocation} />;\n};\n\nconst MapOverlay = () => {\n  const { hslMap, initialPositionCoords } = config;\n\n  return (\n    <MapContainer>\n      <LeafletMap center={initialPositionCoords} zoom={17}>\n        <TileLayer\n          url={hslMap}\n          tileSize={256}\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        <MapMarker />\n        <MapStops />\n        <Stops />\n        <RouteOnMap />\n        <Vehicle />\n      </LeafletMap>\n    </MapContainer>\n  );\n};\n\nexport default MapOverlay;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: \"Open Sans\", Helvetica, Sans-Serif;\n  }\n  h1, h2, h3, h4, h5 {\n    font-family: \"Ubuntu\", \"Open Sans\", Helvetica, Sans-Serif;\n    font-weight: 700;\n  }\n  p, div, span {\n    font-family: \"Ubuntu\", \"Open Sans\", Helvetica, Sans-Serif;\n    font-weight: 500;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { ThemeProvider } from \"styled-components\";\nimport theme from \"./themes/theme\";\nimport client from \"./graphql/client\";\nimport Header from \"./components/Header\";\nimport GlobalContextComponent from \"./components/GlobalContextComponent\";\nimport GeoLocate from \"./components/GeoLocate\";\nimport MapOverlay from \"./components/Map/MapOverlay\";\nimport GlobalStyle from \"./themes/globalStyle\";\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <ApolloProvider client={client}>\n        <GlobalContextComponent>\n          <GeoLocate>\n            <Header />\n            <MapOverlay />\n          </GeoLocate>\n        </GlobalContextComponent>\n      </ApolloProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/menu.597d55c7.svg\";","module.exports = __webpack_public_path__ + \"static/media/x.6a954980.svg\";","module.exports = __webpack_public_path__ + \"static/media/bus.e832c78f.svg\";","module.exports = __webpack_public_path__ + \"static/media/tram.008e5640.svg\";","module.exports = __webpack_public_path__ + \"static/media/train.6e260072.svg\";","module.exports = __webpack_public_path__ + \"static/media/subway.68e26a10.svg\";","module.exports = __webpack_public_path__ + \"static/media/ferry.1717a18b.svg\";","module.exports = __webpack_public_path__ + \"static/media/vehicle.cb8deca8.svg\";","module.exports = __webpack_public_path__ + \"static/media/triangle.0af5b0f0.svg\";"],"sourceRoot":""}